@require: pervasives
@require: list
@require: option
@require: gr

module Itemize : sig

  direct +listing : [bool?; itemize] block-cmd
  direct \listing : [bool?; itemize] inline-cmd
  direct +enumerate : [itemize] block-cmd
  direct \enumerate : [itemize] inline-cmd

end = struct

  let (+++>) = List.fold-left (+++)


  let item-indent = 16pt
  let item-gap = 10pt
  let item-gap-outer = 6pt


  let bullet color (x, y) =
    let cx = x +' 4pt in
    let cy = y +' 4pt in
    let r = 2pt in
      [ fill color (Gr.circle (cx, cy) r); ]


  let-rec listing-item : context -> int -> itemize -> block-boxes
    | ctx depth (Item(parent, children)) =
        let color = get-text-color ctx in
        let ib-bullet = inline-graphics 8pt 8pt 0pt (bullet color) ++ inline-skip 8pt in
        let bullet-width = get-natural-width ib-bullet in
        let parent-indent = item-indent *' (float depth) in
        let ib-parent =
          embed-block-top ctx ((get-text-width ctx) -' parent-indent -' bullet-width) (fun ctx ->
            form-paragraph (ctx |> set-paragraph-margin item-gap item-gap)
              (read-inline ctx parent ++ inline-fil)
          )
        in
        let bb-parent =
          form-paragraph (ctx |> set-paragraph-margin item-gap item-gap)
            ((inline-skip parent-indent) ++ ib-bullet ++ ib-parent)
        in
        let bblst-children = List.map (listing-item ctx (depth + 1)) children in
          bb-parent +++> bblst-children


  let-rec listing-item-breakable
    | ctx depth (Item(parent, children)) =
        let color = get-text-color ctx in
        let ib-bullet = inline-graphics 8pt 8pt 0pt (bullet color) ++ inline-skip 8pt in
        let bullet-width = get-natural-width ib-bullet in
        let parent-indent = item-indent *' (float depth) in
        let pads = (parent-indent +' bullet-width, 0pt, 0pt, 0pt) in
        let decos =
          let deco _ _ _ _ = [] in
            (deco, deco, deco, deco)
        in
        let bb-parent =
          block-nil +++> [
%            line-break true false (ctx |> set-paragraph-margin item-gap 0pt) inline-fil;
            block-frame-breakable (ctx |> set-paragraph-margin item-gap item-gap) pads decos (fun ctx ->
              form-paragraph ctx
                (inline-skip (0pt -' bullet-width) ++ ib-bullet
                  ++ read-inline ctx parent ++ inline-fil)
            );
%            line-break true false (ctx |> set-paragraph-margin 0pt item-gap) inline-fil;
          ]
        in
        let bblst-children = List.map (listing-item-breakable ctx (depth + 1)) children in
          bb-parent +++> bblst-children


  let listing break ctx (Item(_, itmzlst)) =
    if break then
      let bblst = List.map (listing-item-breakable ctx 0) itmzlst in
        block-skip item-gap-outer +++ (block-nil +++> bblst) +++ block-skip item-gap-outer
    else
      let bblst = List.map (listing-item ctx 0) itmzlst in
        block-skip item-gap-outer +++ (block-nil +++> bblst) +++ block-skip item-gap-outer


  let-block ctx +listing ?:breakopt item =
    let break = Option.from false breakopt in
      listing break ctx item


  let-inline ctx \listing ?:breakopt item =
    let break = Option.from false breakopt in
      inline-fil ++
        embed-block-breakable ctx (listing break ctx item)


  let-rec enumerate-item : int -> context -> int -> itemize -> block-boxes
    | index ctx depth (Item(parent, _)) =
        let color = get-text-color ctx in
        let parent-indent = item-indent *' (float depth) in
        let ib-index =
          let it-num = (embed-string (arabic index)) in
            read-inline ctx {(#it-num;)\ }
        in
        let index-width = get-natural-width ib-index in
        let ib-parent =
          embed-block-top ctx ((get-text-width ctx) -' parent-indent -' index-width) (fun ctx ->
            form-paragraph (ctx |> set-paragraph-margin item-gap item-gap)
              (read-inline ctx parent ++ inline-fil)
          )
        in
          form-paragraph (ctx |> set-paragraph-margin item-gap item-gap)
            ((inline-skip parent-indent) ++ ib-index ++ ib-parent)


  let enumerate ctx (Item(_, itmzlst)) =
    let bblst = List.mapi (fun i -> enumerate-item (i + 1) ctx 0) itmzlst in
    block-nil +++> bblst


  let-block ctx +enumerate item =
    enumerate ctx item


  let-inline ctx \enumerate item =
    let bb = enumerate ctx item in
    inline-fil ++
      embed-block-breakable ctx
        (block-skip item-gap-outer +++ bb +++ block-skip item-gap-outer)

end
